@page "/board"

@code {
    private const int BoardSize = 8;
    private string[,] _board = new string[BoardSize, BoardSize];

    protected override void OnInitialized()
    {
        InitializeBoard();
    }

    private void InitializeBoard()
    {
        _board = new string[,] {
            { "♜", "♞", "♝", "♛", "♚", "♝", "♞", "♜" },
            { "♟", "♟", "♟", "♟", "♟", "♟", "♟", "♟" },
            { "", "", "", "", "", "", "", "" },
            { "", "", "", "", "", "", "", "" },
            { "", "", "", "", "", "", "", "" },
            { "", "", "", "", "", "", "", "" },
            { "♙", "♙", "♙", "♙", "♙", "♙", "♙", "♙" },
            { "♖", "♘", "♗", "♕", "♔", "♗", "♘", "♖" }
    };
    }

    private void OnSquareClick(int row, int col)
    {
        Console.WriteLine($"Clicked: Row {row}, Column {col}, Piece: {_board[row, col]}");
        // Handle move logic here
    }
    
    private string GetSquareColor(int row, int col)
    {
        return (row + col) % 2 == 0 ? "light-square" : "dark-square";
    }
}

<style>
    .chess-board {
        display: grid;
        grid-template-columns: repeat(8, 60px);
        grid-template-rows: repeat(8, 60px);
        border: 2px solid black;
        width: fit-content;
    }

    .square {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 32px;
        font-weight: bold;
        width: 60px;
        height: 60px;
        border: 1px solid black;
    }

    .light-square {
        background-color: #f0d9b5;
    }

    .dark-square {
        background-color: #b58863;
    }
</style>

<div class="chess-board">
    @for (int row = 0; row < BoardSize; row++)
    {
        @for (int col = 0; col < BoardSize; col++)
        {
            <div class="square @GetSquareColor(row, col)"
                 @onclick="() => OnSquareClick(row, col)">
                @_board[row, col]
            </div>
        }
    }
</div>
